[{"/Users/sagban/react-hackathon/src/index.js":"1","/Users/sagban/react-hackathon/src/App.js":"2","/Users/sagban/react-hackathon/src/reportWebVitals.js":"3","/Users/sagban/react-hackathon/src/components/YoutubeIFrame.js":"4","/Users/sagban/react-hackathon/src/Pages/Home/Home.js":"5","/Users/sagban/react-hackathon/src/Components/YoutubeIFrame.js":"6"},{"size":500,"mtime":1611475587042,"results":"7","hashOfConfig":"8"},{"size":197,"mtime":1611656225695,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1611475587043,"results":"10","hashOfConfig":"8"},{"size":469,"mtime":1611651758680,"results":"11","hashOfConfig":"8"},{"size":9362,"mtime":1611656106435,"results":"12","hashOfConfig":"8"},{"size":469,"mtime":1611651758680,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"4y7hi5",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"/Users/sagban/react-hackathon/src/index.js",[],["30","31"],"/Users/sagban/react-hackathon/src/App.js",[],"/Users/sagban/react-hackathon/src/reportWebVitals.js",[],"/Users/sagban/react-hackathon/src/components/YoutubeIFrame.js",[],["32","33"],"/Users/sagban/react-hackathon/src/Pages/Home/Home.js",["34"],"import React from \"react\";\nimport './Home.css'\nimport axios from \"axios/index\";\nimport YoutubeIFrame from \"../../Components/YoutubeIFrame\";\nimport Chart from \"chart.js\";\n\nconst _ = require('lodash');\n\nconst Home = () => {\n\n    const [matchedCaptions, setMatchedCaptions] = React.useState([]);\n    const [captions, setCaptions] = React.useState([]);\n    const [url, setUrl] = React.useState(\"\");\n    const [videoId, setVideoId] = React.useState(\"\");\n    const [phrase, setPhrase] = React.useState(\"\");\n    const [transcript, setTranscript] = React.useState(\"\");\n    const [startTime, setStartTime] = React.useState(0);\n    const [keyNotes, setKeyNotes] = React.useState([]);\n\n    const getTranscriptHandler = () => {\n        const regExp = /^.*(youtu\\.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n        const match = url.match(regExp);\n        if (match && match[2].length === 11) {\n            setVideoId(match[2]);\n            axios.get(`https://get-transcripts.azurewebsites.net/api/hack?code=Bz7Fagkn0m3k7br2RRIeg7kDda3UVRzWnJJixs13sXYzuoZTjrd2Uw==&videoId=${match[2]}`)\n                .then(res => {\n                    setCaptions(res.data);\n                })\n                .catch(err => console.error(err))\n        } else {\n            alert(\"Invalid URL\");\n            setVideoId(\"\");\n        }\n    };\n    const getKeyNotes = () => {\n        let matches = [];\n        axios.post('https://hackathon.autokaas.com/tagExtractor', {\"text\": transcript}, {\n            headers: {\n                \"accept\": \"application/json\",\n                \"X-API-KEY\": \"oDtOHyuaEb2D0J6WGkAwv4rhn7hTIl8c4u3P5hic\",\n                \"Content-Type\": \"application/json\"\n            }\n        }).then(res => {\n            let tagArray = res.data.response[0].tags;\n            setKeyNotes(tagArray);\n        })\n            .catch(err => console.log(err));\n    };\n    const searchPhraseHandler = () => {\n        let matches = [];\n        axios.post('https://hackathon.autokaas.com/get_similarWords', {\"words\": [phrase]}, {\n            headers: {\n                \"accept\": \"application/json\",\n                \"X-API-KEY\": \"oDtOHyuaEb2D0J6WGkAwv4rhn7hTIl8c4u3P5hic\",\n                \"Content-Type\": \"application/json\"\n            }\n        }).then(res => {\n            let arr = [...res.data.similar_words, phrase];\n            let tempTranscript = \" \";\n            captions.forEach(caption => {\n                tempTranscript += \" \" + caption.text;\n                for (let i = 0; i < arr.length; i++) {\n                    console.log(\"outside if\");\n                    if (_.includes(caption.text, arr[i].replace(\"_\", \" \"))) {\n                        console.log(\"inside if\");\n                        matches.push({...caption, matchedPhrase: arr[i]});\n                        break;\n                    }\n                }\n            });\n            setTranscript(tempTranscript);\n            setMatchedCaptions(matches);\n            console.log(matches);\n        })\n            .catch(err => console.log(err));\n    };\n\n    const getSentimentAnalysis = () => {\n        let sentimentsArray = [];\n        axios.get(`https://youtube.googleapis.com/youtube/v3/commentThreads?part=snippet&maxResults=25&order=relevance&videoId=${videoId}&key=AIzaSyApX3bSpv8b3y1PEiA29VYI5jh1ZEyd7EQ`)\n            .then(res => {\n                let comments = [];\n                let commentObjs = res.data.items;\n                commentObjs.forEach(comObj => {\n                    comments.push(comObj.snippet.topLevelComment.snippet.textDisplay)\n                });\n                axios.post(\"https://hackathon.autokaas.com/get_sentiment\", {\"texts\": comments}, {\n                    headers: {\n                        \"accept\": \"application/json\",\n                        \"X-API-KEY\": \"oDtOHyuaEb2D0J6WGkAwv4rhn7hTIl8c4u3P5hic\",\n                        \"Content-Type\": \"application/json\",\n                    }\n                }).then(r => {\n                    sentimentsArray = r.data.results;\n                    let chartData = [_.sumBy(sentimentsArray, (o) => o.scores['1 star']),\n                        _.sumBy(sentimentsArray, (o) => o.scores['2 star']),\n                        _.sumBy(sentimentsArray, (o) => o.scores['3 star']),\n                        _.sumBy(sentimentsArray, (o) => o.scores['4 star']),\n                        _.sumBy(sentimentsArray, (o) => o.scores['5 star'])]\n                    console.log(chartData);\n                    console.log(\"henlo\");\n                    const ctx = document.getElementById(\"sa-chart\");\n                    new Chart(ctx, {\n                        type: \"pie\",\n                        data: {\n                            labels: [\"Dont even think about it\", \"Not Good\", \"Okaish\", \"Good\", \"Awesome\"],\n                            datasets: [\n                                {\n                                    label: \"# of Votes\",\n                                    data: chartData,\n                                    backgroundColor: [\n                                        \"Black\",\n                                        \"Gray\",\n                                        \"Yellow\",\n                                        \"Pink\",\n                                        \"Red\"\n                                    ],\n                                    borderColor: [\"Dont even think about it\", \"Not Good\", \"Okaish\", \"Good\", \"Awesome\"],\n                                    borderWidth: 1\n                                }\n                            ]\n                        }\n                    });\n                })\n                    .catch(er => console.error(er));\n            })\n            .catch(err => console.error(err));\n        console.log(sentimentsArray);\n\n    };\n\n    return (<div>\n        <div id=\"home\">\n            <div className=\"container fullheight home\">\n                <div className=\"row\">\n                    <div className=\"col-md-7 col-xs-12\">\n                        <h1 className=\"color-primary\">Elysium</h1>\n                        <p className=\"color-white fontsize-lg\">\n                            A NLP tool for remove those hassles of finding that “the” moment in the video to give user\n                            quick and most relevant content.\n                        </p>\n                        <a href=\"#getstarted\" className=\"button\">Get Started</a>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div className=\"container transcript\" id=\"getstarted\">\n            <div className=\"text-centre\"><h1 className=\"color-dark\">Get Started</h1></div>\n            <div className=\"row\">\n                <div className=\"col-md-6\">\n                    <div className=\"inner\">\n                        <label itemID=\"youtubeUrl\">Youtube URL *</label>\n                        <input className=\"input\" type=\"url\" name=\"Youtube Url\" id=\"youtubeUrl\" value={url}\n                               placeholder=\"Enter Youtube URL\"\n                               onChange={(e) => setUrl(e.target.value)}/>\n                        <button type=\"submit\" className=\"button button-v2\" onClick={getTranscriptHandler}>Get Video\n                        </button>\n                    </div>\n                </div>\n                <div className=\"col-md-6\">\n                    <div className=\"grid-item\">\n                        <header className=\"App-header\">\n                            {videoId.length === 11 ?\n                                <YoutubeIFrame videoId={videoId} startTimeInSeconds={Math.floor(startTime)}/> :\n                                <div className=\"dummy\"></div>}\n                        </header>\n                    </div>\n                </div>\n            </div>\n            {videoId.length > 0 ?\n                <div>\n                    <div>\n                        <label itemID=\"phrase\">Search Phrase *</label>\n                        <input className=\"input\" type=\"text\" name=\"Pharse\" id=\"phrase\" value={phrase}\n                               placeholder=\"Enter Phrase\"\n                               onChange={(e) => setPhrase(e.target.value)}/>\n\n                        <button className=\"button button-v2\" type=\"submit\" onClick={searchPhraseHandler}>Search</button>\n                        <br/>\n                        {matchedCaptions.map(c => <button className=\"button button-v2\"\n                                                          onClick={() => setStartTime(c.start)}\n                                                          type=\"submit\">{c.matchedPhrase} - {c.start}</button>)}\n                    </div>\n                    <div>\n                        {transcript.length > 0 ?\n                            <button className=\"button button-v2\" type=\"submit\" onClick={getKeyNotes}>Get\n                                Keypoints</button> : null}\n                        <br/>\n                        {keyNotes.map(keyNote => <span className=\"badge bg-warning text-dark\">{keyNote}</span>)}\n                    </div>\n                    <div>\n                        <button className=\"button button-v2\" type=\"submit\" onClick={getSentimentAnalysis}>Analyse\n                            Sentiment\n                        </button>\n                        <canvas id=\"sa-chart\"></canvas>\n                    </div>\n                </div>\n                : \"\"}\n\n\n        </div>\n\n    </div>)\n\n};\n\nexport default Home;\n","/Users/sagban/react-hackathon/src/Components/YoutubeIFrame.js",[],["35","36"],{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"37","replacedBy":"41"},{"ruleId":"39","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":36,"column":13,"nodeType":"45","messageId":"46","endLine":36,"endColumn":20},{"ruleId":"37","replacedBy":"47"},{"ruleId":"39","replacedBy":"48"},"no-native-reassign",["49"],"no-negated-in-lhs",["50"],["49"],["50"],"no-unused-vars","'matches' is assigned a value but never used.","Identifier","unusedVar",["49"],["50"],"no-global-assign","no-unsafe-negation"]